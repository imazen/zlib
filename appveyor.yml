version: 1.2.7.{build}

shallow_clone: true


environment:
  matrix:
    - build_platform: "x86"
      build_compiler: "msvc12"
      static_runtime: 0
    
    - build_platform: "x64"
      build_compiler: "msvc12"
      static_runtime: 0
    
    - build_platform: "x86"
      build_compiler: "mingw"
      static_runtime: 1
    
    - build_platform: "x64"
      build_compiler: "mingw"
      static_runtime: 1


install:
  - ps: if($env:build_platform -eq 'x64') {
          $env:vcvar_arg = 'x86_amd64';
        }
        elseif($env:build_platform -eq 'x86') {
          $env:vcvar_arg = 'x86';
        }
  
  # get common functions
  - git clone https://github.com/imazen/gd-appveyor-helpers
  - ps: . .\gd-appveyor-helpers\appveyor_funcs.ps1
  
  # get mingw-w64 (C:\mingw64)
  - ps: if($env:build_compiler -eq 'mingw' -and $env:build_platform -eq 'x64') {
      invoke 'curl' '-L -o mw64.7z "http://libgd.blob.core.windows.net/mingw/x86_64-4.9.1-release-posix-seh-rt_v3-rev1.7z"';
      invoke '7z' 'x -oC:\ mw64.7z'; }
  
  # sh is breaking mingw builds; remove
  - for %%i in (sh.exe) do @del "%%~$PATH:i"



build_script:
  - '"C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\vcvarsall" %vcvar_arg%'
  - if [%build_compiler%]==[mingw] if [%build_platform%]==[x86] SET PATH=C:\MinGW\bin;%PATH%
  - if [%build_compiler%]==[mingw] if [%build_platform%]==[x64] SET PATH=C:\mingw64\bin;%PATH%
  
  - SET zip=zlib-%build_compiler%-%build_platform%.zip
  - ps: $nupkg_b = "zlib-$($env:build_compiler)-$($env:build_platform)-$($env:APPVEYOR_REPO_BRANCH)";
  - ps: $nupkg_c = "zlib-$($env:build_compiler)-$($env:build_platform)-$($env:APPVEYOR_REPO_COMMIT)";
  
  - SET tbs_settings=export tbs_tools=%build_compiler%;
                     export tbs_platform=%build_platform%;
                     export tbs_static_runtime=%static_runtime%
  
  - bash -c "%tbs_settings%; ./thumbs make"
  - bash -c "%tbs_settings%; f=$(./thumbs list); 7z a %zip% $f"
  - appveyor PushArtifact %zip%
  
  - ps: if(Test-Path $env:zip) {
          zip2nuget $env:zip $nupkg_b;
          zip2nuget $env:zip $nupkg_c; }



test_script:
  - SET fail=0
  - bash -c "%tbs_settings%; ./thumbs check" || SET fail=1 & ver > nul
  - ps: Push-Ctest-Results 'build'
  - ps: Push-AppveyorArtifact build\Testing\Temporary\LastTest.log
  - exit %fail%


on_success:
  - ps: Push-AppveyorArtifact "$nupkg_b*.nupkg"
  - ps: Push-AppveyorArtifact "$nupkg_c*.nupkg"

version: 1.2.7.{build}
shallow_clone: true


environment:
  matrix:
    - tbs_arch: "x86"
      tbs_tools: "msvc12"
      tbs_static_runtime: 0
    
    - tbs_arch: "x64"
      tbs_tools: "msvc12"
      tbs_static_runtime: 0
    
    - tbs_arch: "x86"
      tbs_tools: "mingw"
      tbs_static_runtime: 1
    
    - tbs_arch: "x64"
      tbs_tools: "mingw"
      tbs_static_runtime: 1


install:
  - ps: if($env:tbs_arch -eq 'x64') {
          $env:vcvar_arg = 'x86_amd64';
        }
        elseif($env:tbs_arch -eq 'x86') {
          $env:vcvar_arg = 'x86';
        }
  
  # push ctest results as xtest (warning: ugly)
  - ps: $wc = New-Object 'System.Net.WebClient'
  - ps: function Push-Ctest-Results($dir, $prefix="")
        {
          $head = "<?xml version=`"1.0`" encoding=`"utf-8`"?>`n<assembly name=`"`" run-date=`"1970-01-01`" run-time=`"00:00:00`" configFile=`"`" time=`"0`" total=`"0`" passed=`"0`" failed=`"0`" skipped=`"0`" environment=`"`">`n<class time=`"0`" name=`"`" total=`"0`" passed=`"0`" failed=`"0`" skipped=`"0`">`n";
          $foot = "</class>`n</assembly>`n";
          $out = Select-String "(?s)\d+\/\d+ Testing.*?end time.*?[-]{58}" -input ((Get-Content $dir\Testing\Temporary\LastTest.log) -join "`n") -AllMatches;
          $xml = $head;
          $num = 0;
          Select-String "(\w+)\s+(\d+)\s+(\d+(\.\d{1,3})?)" -input (Get-Content $dir\Testing\Temporary\CTestCostData.txt)-AllMatches | % {$_.Matches} | % {
            $name = $prefix + $_.Groups[1].Value;
            $res = @{$true="Pass";$false="Fail"}[$_.Groups[2].Value -eq 1];
            $time = $_.Groups[3].Value;
            $output = $out.Matches[$num].Value -replace "$([char]8)", "";
            $maxlen = 5000;
            if($output.length -gt $maxlen) {$output = $output.substring(0,$maxlen) + "`n`n*snip*"};
            if($time -eq "0") {$time = "0.000"};
            $output = [System.Security.SecurityElement]::Escape($output);
            $num++;
            $xml += "<test name=`"$name`" type=`"`" method=`"`" result=`"$res`" time=`"$time`">`n<output>$output</output>`n</test>`n"
          };
          $xml += $foot;
          $xml > ".\xunit_tmp.xml";
          $wc.UploadFile("https://ci.appveyor.com/api/testresults/xunit/$Env:APPVEYOR_JOB_ID", (Resolve-Path .\xunit_tmp.xml));
        }
  
  # get mingw-w64 (C:\mingw64)
  - ps: if($env:tbs_tools -eq 'mingw' -and $env:tbs_arch -eq 'x64')
        {
          curl -outfile mw64.7z "http://libgd.blob.core.windows.net/mingw/x86_64-4.9.1-release-posix-seh-rt_v3-rev1.7z";
          if((Get-FileHash mw64.7z -Algorithm SHA1).Hash -ne "91A35AE296C1A71802AB0C7228EE57F9AAC5D7C7")
          {
            echo "Invalid file hash";
            exit 1;
          };
          7z x -oC:\ mw64.7z | out-null;
        }



build_script:
  - '"C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\vcvarsall" %vcvar_arg%'
  - if [%tbs_tools%]==[mingw] if [%tbs_arch%]==[x86] SET PATH=C:\MinGW\bin;%PATH%
  - if [%tbs_tools%]==[mingw] if [%tbs_arch%]==[x64] SET PATH=C:\mingw64\bin;%PATH%
  
  - SET zip=zlib-%tbs_tools%-%tbs_arch%.zip
  
  - thumbs make
  - for /f "tokens=*" %%i in ('thumbs list') do set files=%%i
  - 7z a %zip% %files%
  - appveyor PushArtifact %zip%



test_script:
  - SET fail=0
  - thumbs check || SET fail=1 & ver > nul
  - ps: Push-Ctest-Results 'build'
  - ps: Push-AppveyorArtifact build\Testing\Temporary\LastTest.log
  - exit %fail%
